

.. _sphx_glr_auto_examples_plot_watchdata.py:


=============================
Working with Time Series Data
=============================

This example shows how to load the included smartwatch inertial sensor dataset, and create time series data objects compatible with the `seglearn` pipeline.





.. image:: /auto_examples/images/sphx_glr_plot_watchdata_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    DATA STATS - AGGREGATED
    {'Total_Time': 4882.04, 'Series_Time_Range': (18.94, 52.36), 'n_classes': 7, 'n_series': 140, 'Series_Time_Mean': 34.87171428571428, 'Series_Time_Std': 8.757850351285423, 'n_TS_vars': 6, 'n_context_vars': 2}

    DATA STATS - BY CLASS
      Class_labels  Series_Time_Max  Series_Time_Mean  Series_Time_Min  \
    0          PEN            31.10            26.622            21.28   
    1          ABD            49.10            39.905            22.48   
    2          FEL            50.84            40.498            22.30   
    3           IR            52.36            37.395            19.40   
    4           ER            49.24            37.604            21.30   
    5         TRAP            45.12            30.578            19.26   
    6          ROW            38.66            31.500            18.94   

       Series_Time_Std  Total_Time  n_series  
    0         2.720845      532.44        20  
    1         8.055554      798.10        20  
    2         8.772099      809.96        20  
    3         9.085212      747.90        20  
    4         7.983878      752.08        20  
    5         6.099252      611.56        20  
    6         5.957100      630.00        20




|


.. code-block:: python

    # Author: David Burns
    # License: BSD

    from seglearn.datasets import load_watch
    from seglearn.util import make_ts_data, check_ts_data, ts_stats, get_ts_data_parts

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt

    data = load_watch()

    y = data['y']
    Xt = data['X']
    fs = 50 # sampling frequency

    # create time series data object with no contextual variables
    X = make_ts_data(Xt)
    check_ts_data(X)

    # create time series data object with 2 contextual variables
    Xs = np.column_stack([data['side'], data['subject']])
    X = make_ts_data(Xt, Xs)
    check_ts_data(X)

    # recover time series and contextual variables
    Xt, Xs = get_ts_data_parts(X)

    # generate some statistics from the time series data
    results = ts_stats(X, y, fs = fs, class_labels = data['y_labels'])
    print("DATA STATS - AGGREGATED")
    print(results['total'])
    print("")
    print("DATA STATS - BY CLASS")
    print(pd.DataFrame(results['by_class']))

    # plot an instance from the data set
    # this plot shows 6-axis inertial sensor data recorded by someone doing shoulder pendulum exercise
    Xt0 = Xt[0]
    f, axes = plt.subplots(nrows=1, ncols=2)
    t=np.arange(len(Xt0)) / fs
    axes[0].plot(t, Xt0[:,0], 'r-')
    axes[0].plot(t, Xt0[:,1], 'g-')
    axes[0].plot(t, Xt0[:,2], 'b-')
    axes[0].set_xlabel('time [s]')
    axes[0].set_ylabel('Acceleration [G]')
    axes[0].legend(data['X_labels'][0:3])

    axes[1].plot(t, Xt0[:,3], 'r-')
    axes[1].plot(t, Xt0[:,4], 'g-')
    axes[1].plot(t, Xt0[:,5], 'b-')
    axes[1].set_xlabel('time [s]')
    axes[1].set_ylabel('Rotational Velocity [rad/s]')
    axes[1].legend(data['X_labels'][3:6])

    plt.tight_layout()
    plt.show()

**Total running time of the script:** ( 0 minutes  0.495 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_watchdata.py <plot_watchdata.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_watchdata.ipynb <plot_watchdata.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
