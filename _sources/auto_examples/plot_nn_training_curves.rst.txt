

.. _sphx_glr_auto_examples_plot_nn_training_curves.py:


=======================================
Plotting Neural Network Training Curves
=======================================

This is a basic example using a convolutional recurrent neural network to learn segments directly from time series data




.. code-block:: python

    # Author: David Burns
    # License: BSD

    from seglearn.pipe import SegPipe
    from seglearn.datasets import load_watch

    from sklearn.model_selection import train_test_split
    from keras.layers import Dense, LSTM, Conv1D
    from keras.models import Sequential
    from keras.wrappers.scikit_learn import KerasClassifier

    import numpy as np
    from pandas import DataFrame
    import matplotlib.pyplot as plt







Simple NN Model
#############################################



.. code-block:: python


    def crnn_model(width=100, n_vars=6, n_classes=7, conv_kernel_size=5,
                   conv_filters=64, lstm_units=100):
        input_shape = (width, n_vars)
        model = Sequential()
        model.add(Conv1D(filters=conv_filters, kernel_size=conv_kernel_size,
                         padding='valid', activation='relu', input_shape=input_shape))
        model.add(Conv1D(filters=conv_filters, kernel_size=conv_kernel_size,
                         padding='valid', activation='relu'))
        model.add(LSTM(units=lstm_units, dropout=0.1, recurrent_dropout=0.1))
        model.add(Dense(n_classes, activation="softmax"))

        model.compile(loss='categorical_crossentropy', optimizer='adam',
                      metrics=['accuracy'])

        return model








Setup
#############################################



.. code-block:: python


    # load the data
    data = load_watch()
    X = data['X']
    y = data['y']

    # split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

    # create a segment learning pipeline
    width = 100
    est = KerasClassifier(build_fn=crnn_model, epochs = 10, batch_size = 256, verbose = 0, validation_split = 0.2)
    pipe = SegPipe(est)







Accessing training history
#############################################



.. code-block:: python


    # this is a bit of a hack, because history object is returned by the
    # keras wrapper when fit is called
    # this approach won't work with a more complex estimator pipeline, in which case
    # a callable class with the desired properties should be made passed to build_fn

    pipe.fit(X_train,y_train)
    print(DataFrame(pipe.history.history))
    ac_train = pipe.history.history['acc']
    ac_val = pipe.history.history['val_acc']
    epoch = np.arange(len(ac_train))+1






.. rst-class:: sphx-glr-script-out

 Out::

    acc      loss   val_acc  val_loss
    0  0.226998  1.788833  0.488636  1.531206
    1  0.544583  1.218714  0.632102  0.838874
    2  0.654352  0.786146  0.660511  0.669241
    3  0.678153  0.683976  0.693182  0.562911
    4  0.723623  0.581038  0.700284  0.523653
    5  0.747069  0.537084  0.735795  0.493980
    6  0.747069  0.523839  0.745739  0.485796
    7  0.775844  0.469087  0.772727  0.440391
    8  0.785790  0.436499  0.758523  0.434963
    9  0.791829  0.430949  0.778409  0.465678


Training Curves
#############################################



.. code-block:: python


    plt.plot(epoch, ac_train, 'o', label = "train")
    plt.plot(epoch, ac_val, '+', label = "validation")
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.legend()
    plt.show()


.. image:: /auto_examples/images/sphx_glr_plot_nn_training_curves_001.png
    :align: center




**Total running time of the script:** ( 1 minutes  59.265 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_nn_training_curves.py <plot_nn_training_curves.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_nn_training_curves.ipynb <plot_nn_training_curves.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
