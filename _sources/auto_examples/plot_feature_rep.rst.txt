.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_feature_rep.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_feature_rep.py:


====================================================
Basic Feature Representation Classification Pipeline
====================================================

This is a basic example using the pipeline to learn a feature representation of the time series data





.. image:: /auto_examples/images/sphx_glr_plot_feature_rep_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ('X Shape: ', (3419, 100, 6))
    ('N series in train: ', 105)
    ('N series in test: ', 35)
    ('N segments in train: ', 3419)
    ('N segments in test: ', 1258)
    ('Accuracy score: ', 0.6589825119236884)
    ('X Shape: ', [3437])
    ('X Shape: ', [3461])
    ('X Shape: ', [3590])
    ('X Shape: ', [3543])
    ('CV Scores: ',    fit_time  score_time  test_score  train_score
    0  0.587780    0.131593    0.772581     0.998254
    1  0.595604    0.122980    0.665296     0.999711
    2  0.621950    0.112752    0.882245     0.998050
    3  0.614552    0.116920    0.717813     0.999436)
    ('Features: ', ['std_0', 'std_1', 'std_2', 'std_3', 'std_4', 'std_5', 'mnx_0', 'mnx_1', 'mnx_2', 'mnx_3', 'mnx_4', 'mnx_5', 'min_0', 'min_1', 'min_2', 'min_3', 'min_4', 'min_5', 'max_0', 'max_1', 'max_2', 'max_3', 'max_4', 'max_5', 'skew_0', 'skew_1', 'skew_2', 'skew_3', 'skew_4', 'skew_5', 'var_0', 'var_1', 'var_2', 'var_3', 'var_4', 'var_5', 'mse_0', 'mse_1', 'mse_2', 'mse_3', 'mse_4', 'mse_5', 'kurt_0', 'kurt_1', 'kurt_2', 'kurt_3', 'kurt_4', 'kurt_5', 'mean_0', 'mean_1', 'mean_2', 'mean_3', 'mean_4', 'mean_5'])




|


.. code-block:: python

    # Author: David Burns
    # License: BSD


    from seglearn.transform import FeatureRep
    from seglearn.pipe import SegPipe
    from seglearn.datasets import load_watch
    from seglearn.base import TS_Data

    from sklearn.pipeline import Pipeline
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.preprocessing import StandardScaler
    from sklearn.model_selection import train_test_split, cross_validate
    from sklearn.metrics import f1_score, make_scorer

    import matplotlib.image as mpimg
    import matplotlib.pyplot as plt

    import numpy as np
    import pandas as pd

    # seed RNGESUS
    np.random.seed(123124)

    # load the data
    data = load_watch()
    X = data['X']
    y = data['y']

    # create a feature representation pipeline

    est = Pipeline([('features', FeatureRep()),
                    ('scaler', StandardScaler()),
                    ('rf', RandomForestClassifier())])
    pipe = SegPipe(est)

    # split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

    pipe.fit(X_train,y_train)
    score = pipe.score(X_test, y_test)

    print("N series in train: ", len(X_train))
    print("N series in test: ", len(X_test))
    print("N segments in train: ", pipe.N_train)
    print("N segments in test: ", pipe.N_test)
    print("Accuracy score: ", score)

    # now lets add some contextual data
    Xc = np.column_stack((data['side'], data['subject']))
    Xt = np.array(data['X'])
    X = TS_Data(Xt, Xc)
    y = np.array(data['y'])

    # and do a cross validation
    scoring = make_scorer(f1_score, average = 'macro')
    cv_scores = cross_validate(pipe, X, y, cv = 4, return_train_score=True)
    print("CV Scores: ", pd.DataFrame(cv_scores))

    # lets see what feature we used
    print("Features: ", pipe.est.steps[0][1].f_labels)

    img = mpimg.imread('feet.jpg')
    plt.imshow(img)
**Total running time of the script:** ( 0 minutes  5.328 seconds)


.. _sphx_glr_download_auto_examples_plot_feature_rep.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_feature_rep.py <plot_feature_rep.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_feature_rep.ipynb <plot_feature_rep.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
